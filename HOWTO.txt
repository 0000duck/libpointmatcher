How to create a new DataPointFilter:

You'll need to modify 3 files to add a new DataPointFilter: <DataPointFilter.h>, <DataPointFilter.cpp> and <Core.cpp>
The easiest way is to start with IdentityDataPointsFilter as an example.

- In <DataPointFilterImp.h>, copy the declaration of the struct IdentityDataPointsFilter at the end of the file.
- Rename the pasted structure with the new filter name
- Fill the description() function with short explaination of the filter
- If you need parameters for the filter:
    - uncomment the availableParameters() function and filled the description, default, min, max values as string
		- types of the parameter are use to properly cast the string value and can be:  &P::Comp<T>, &P::Comp<int>, &P::Comp<unsigned>, etc.
		- uncomment and rename the constructor

- In <DataPointFilterImp.cpp>, copy the implementation of IdentityDataPointsFilter at the end of the file including the predeclaration (i.e. template struct DataPointsFiltersImpl<float>::YourFilter; and template struct DataPointsFiltersImpl<double>::YourFilter;)
- Add the constructor if needed
- At this stage, you shoud let the filter function only with the return input;

- In <Core.cpp>, search for "ADD_TO_REGISTRAR(DataPointsFilter,". 
- You should see all available dataPointfilter there. At the end of that block, add your filter.

- Compile
- Test if your new module is available with the executable list_modules (in example). This program list the documentation of all module. You should be able to find yours in the output.

- Go back to <DataPointFilter.cpp> and code the filter() function.



